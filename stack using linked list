class Node:
    def __init__(self,value):
        self.value=value
        self.next=None
class Stack:
    def __init__(self):
        self.head=Node("head")
        self.size=0
    def __str__(self):
        cur=self.head.next
        out=""
        while cur:
            out=out+str(cur.value)+"->"
            cur=cur.next
        return out[:-2]
    def getsize(self):
        return self.size
    def isEmpty(self):
        return self.size==0
    def peek(self):
        if self.isEmpty():
            raise Exception("stack underflow")
        return self.head.next.value
    def push(self,value):
        node=Node(value)
        node.next=self.head
        self.head=node
        self.size+=1
    def pop(self):
        if self.isEmpty():
            raise Exception("stack underflow")
        remove=self.head.next
        self.head.next=self.head.next.next
        self.size-=1
if __name__=="__main__":
    stack=Stack()
    for i in range(1,11):
        stack.push(i)
    print(f"Stack:{stack}")
    for _ in range(1,6):
        remove=stack.pop()
        print(f"pop:{remove}")
    print(f"Stack:{stack}")
